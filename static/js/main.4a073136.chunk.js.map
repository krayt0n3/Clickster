{"version":3,"sources":["components/Footer.js","components/MainContent.js","components/Spacer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","React","Component","ImageCard","props","className","alt","name","src","image","onClick","handleIncrement","Spacer","App","state","images","count","score","_this","setState","console","log","push","_this2","this","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","href","max","apply","Spacer_Spacer","Container","Row","map","MainContent","id","key","onChange","handleInputChange","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"61DAMqBA,0LAEjB,OACIC,EAAAC,EAAAC,cAAA,gCAH4BC,IAAMC,YCe3BC,MAbf,SAAmBC,GACjB,OAEEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAMC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAASN,EAAMO,6CCP1DC,mLAEjB,OACId,EAAAC,EAAAC,cAAA,UAAQK,UAAU,UAASP,EAAAC,EAAAC,cAAA,0BAAqBF,EAAAC,EAAAC,cAAA,8FAHpBC,IAAMC,WCiF3BW,6MA7EbC,MAAQ,CACNC,SACAC,MAAQ,EACRC,MAAO,CAAC,MAGVN,gBAAkB,WAGhBO,EAAKC,SAAS,CAAEH,MAAOE,EAAKJ,MAAME,MAAQ,IAC1CI,QAAQC,IAAIH,EAAKJ,MAAME,OACvBE,EAAKJ,MAAMG,MAAMK,KAAKJ,EAAKJ,MAAME,OACjCI,QAAQC,IAAIH,EAAKJ,MAAMG,gFAKhB,IAAAM,EAAAC,KAyBP,OAvBc,SAAUC,GAMtB,IAJA,IACIC,EAAgBC,EADhBC,EAAeH,EAAMI,OAIlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAOzBO,CAAQlB,GAGNjB,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,UACjBP,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAAA,KAAGkC,KAAK,KAAR,cACLpC,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,oBAAYwB,KAAKV,MAAME,MAAQ,EAA/B,iBAAgDc,KAAKK,IAAIC,MAAM,KAAMZ,KAAKV,MAAMG,SAG7EnB,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KAEDf,KAAKV,MAAMC,OAAOyB,IAAI,SAAA/B,GAAK,OAC1BX,EAAAC,EAAAC,cAACyC,EAAD,CACEC,GAAIjC,EAAMiC,GACVC,IAAKlC,EAAMiC,GACXnC,KAAME,EAAMF,KACZE,MAAOA,EAAMA,MACbE,gBAAiBY,EAAKZ,gBACtBiC,SAAUrB,EAAKsB,wBAOnB/C,EAAAC,EAAAC,cAAC8C,EAAD,cAvEU7C,IAAMC,WCGJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4a073136.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Global.css\";\r\n\r\n\r\n\r\n\r\nexport default class Footer extends React.Component {\r\n  render() {\r\n    return (\r\n        <footer>\r\n        Clicker\r\n        </footer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../styles/Global.css\";\r\n\r\n\r\n\r\n\r\n  \r\n\r\nfunction ImageCard(props) {\r\n  return (\r\n     \r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img className=\"img\" alt={props.name} src={props.image} onClick={props.handleIncrement}/>\r\n      </div>\r\n    </div>\r\n    \r\n   \r\n  );\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"../styles/Global.css\";\r\n\r\n\r\n\r\n\r\nexport default class Spacer extends React.Component {\r\n  render() {\r\n    return (\r\n        <header className=\"header\"><h1>Clicky Game!</h1><h2>Click on an image to earn points, but don't click on any more than once!</h2></header>\r\n    );\r\n  }\r\n}\r\n","import React  from \"react\";\n\nimport Footer from \"./components/Footer\"\nimport ImageCard from \"./components/MainContent\"\nimport images from \"../src/images.json\"\nimport {Container, Row} from \"react-bootstrap\"\nimport Spacer from \"./components/Spacer\"\n\n\nclass App extends React.Component {\n  state = {\n    images,\n    count : 1,\n    score: [0]\n  };\n \n  handleIncrement = () => {\n    \n    \n    this.setState({ count: this.state.count + 1 });\n    console.log(this.state.count);\n    this.state.score.push(this.state.count);\n    console.log(this.state.score);\n    \n  };\n\n\n  render() {  \n\n    var shuffle = function (array) {\n\n      var currentIndex = array.length;\n      var temporaryValue, randomIndex;\n    \n      \n      while (0 !== currentIndex) {\n        \n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n    \n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n    \n      return array;\n    \n    };\n  \n    shuffle(images);\n    \n    return (\n      <div>\n        \n        \n        <ul className=\"navbar\">\n     <li> <a href=\"/\">Clickster</a></li>\n     <li>Click the image to begin!</li>\n     <li>Score: {this.state.count - 1} | Top Score: {Math.max.apply(null, this.state.score)}</li>\n     </ul> \n    \n        <Spacer />\n        <Container>\n          <Row>\n            \n        {this.state.images.map(image => (\n          <ImageCard\n            id={image.id}\n            key={image.id}\n            name={image.name}\n            image={image.image}\n            handleIncrement={this.handleIncrement}\n            onChange={this.handleInputChange}\n            \n          />\n        ))}\n        \n        </Row>\n        </Container>\n        <Footer />\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}